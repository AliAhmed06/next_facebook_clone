import Head from 'next/head'
import { useEffect, useState } from 'react'

import { app, database } from '../firebase'
import { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from 'firebase/firestore'

import { useRouter } from 'next/router'
import { async } from '@firebase/util'

export default function Home() {
  const router = useRouter();
  const [name, setName] = useState("");
  const [age, setAge] = useState(0);
  const [fireData, setFireData] = useState([]);
  const databaseRef = collection(database, 'CRUD Data');
  
  useEffect(() => {
    let token = sessionStorage.getItem('Token');
    if(token){
      getData();
    }

    if(!token){
      router.push('/Register')
    }
  }, [])

  const addData = async () => {
    await addDoc(databaseRef, {
      name: name,
      age: age
    })
    .then(() => {
      alert('Data Saved');
      setName('');
      setAge(0);
      getData()
    })
    .catch((err) => {
      console.log(err);
    })
  }

  const getData = async () => {
    await getDocs(databaseRef)
    .then((response) => {
      setFireData(response.docs.map((data)=>{
        return {...data.data(), id:data.id}
      }));
    })
  }

  const updateFields = async (id) => {
    let fieldToEdit = doc(database, 'CRUD Data', id);
    await updateDoc(fieldToEdit, {
      name: name,
      age: age
    })
    .then(() => {
      alert('Data Updated')
      getData()
    })
    .catch((err) => {
      console.log(err);
    })
  }


  const deleteField = async (id) => {
    let fieldToDelete = doc(database, 'CRUD Data', id);
    await deleteDoc(fieldToDelete)
    .then(() => {
      alert('Data Deleted')
      getData()
    })
    .catch((err) => {
      console.log(err);
    })
  }

  const logout = () => {
    sessionStorage.removeItem('Token');
    router.push('/Register');
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='flex flex-col items-center justify-center h-screen bg-gray-400 gap-3'>
        <button className='bg-red-700 text-white p-1' onClick={logout}>Logout</button>
        <h2>Home</h2>

        <input 
          type="text" 
          placeholder='Enter Email'  
          className='w-screen max-w-[400px] p-2 px-8 outline-none text-lg'
          value={name}
          onChange={(e) => setName(e.target.value)}
        />

        <input 
          type="number" 
          placeholder='Enter Password'  
          className='w-screen max-w-[400px] p-2 px-8 outline-none text-lg'
          value={age}
          onChange={(e) => setAge(e.target.value)}
        />

        <button 
          className='bg-black text-white w-screen max-w-[400px] p-2' 
          onClick={addData}
        >Add</button>


        <div>
          {fireData.map((data) => {
            return (
              <div className='flex bg-red-500 w-screen max-w-[400px] p-2 px-6 gap-6 items-center justify-center' >
                <h2>{data.name}</h2>
                <h3 className='flex-1'>{data.age}</h3>
                <button 
                  className='bg-green-500 p-1'
                  onClick={() => updateFields(data.id)}
                >Update</button>
                <button 
                  className='bg-yellow-500 p-1'
                  onClick={() => deleteField(data.id)}
                >Delete</button>
              </div>
            )
          })}
        </div>
      </div>
    </>
  )
}
